# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# OPENSOURCE-CLEANUP DELETE_FILE
version: "2.0"

stages:
  - pre-check
  - testing
  - post-check

parameters:
  BUILD_IMAGE: "secretflow/ubuntu-base-ci:0.9"
  RELEASE_IMAGE: "secretflow/release-ci:1.4"
  LINT_IMAGE: "secretflow/lint-ci:0.5"
  BAZEL_MAX_JOBS: 8
  EXAMPLES_TEST_ARTIFACTS_URL: "https://antsys-nebula-archive.cn-hangzhou-alipay-b.oss-cdn.aliyun-inc.com/third_party"

jobs:
  STC check:
    stage: post-check
    component: stc
    inputs:
      tenantName: secretflow
    config:
      execute:
        isAllowSkip: true
      afterExecute:
        allowFailure: true

  clang-format check:
    stage: pre-check
    component: shell-with-clone
    inputs:
      image: ${{parameters.LINT_IMAGE}}
      cloneFetchCommitId: false
      script: |
        git clone git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/lint-clang-format.sh
    # Trigger on PR
    only:
      triggerType:
        - pullRequest
        - push
    config:
      execute:
        isAllowSkip: true
      afterExecute:
        allowFailure: true

  单测覆盖率:
    stage: testing
    component: common-ut
    config:
      afterExecute:
        allowFailure: true
    inputs:
      image: ${{parameters.BUILD_IMAGE}}
      resourceClass: L
      script: |
        set -ex

        whoami && cat /proc/cpuinfo | grep process | wc -l && cat /proc/meminfo | grep MemTotal && df -h

        git clone --depth=1 git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/bazel_repo_cache.py --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} pull

        bazel coverage //psi/... --ui_event_filters=-info,-debug,-warning --combined_report=lcov --jobs ${{parameters.BAZEL_MAX_JOBS}} --test_output=errors --repository_cache=/tmp/bazel_repo_cache | tee test_result.log

        # combine coverage report
        ../tools/combine_coverage_report.sh

      coverageReportPath: "coverage.xml"
    only:
      triggerType:
        - pullRequest # 创建PR及向PR分支push代码时触发
        - push
      triggerBranch: # 设置触发分支
        pushOriginalBranch: # 只有向以下分支提交push才会触发
          - master
          - release/*

  unit test:
    stage: testing
    component: common-ut
    config:
      afterExecute:
        checkRule:
          - ${{outputs.caseFailCount}} <= 0
    inputs:
      image: ${{parameters.BUILD_IMAGE}}
      resourceClass: XL
      script: |
        set -ex

        whoami && cat /proc/cpuinfo | grep process | wc -l && cat /proc/meminfo | grep MemTotal && df -h

        git clone --depth=1 git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/bazel_repo_cache.py --nocleanup true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} pull
        # we need this for build failures
        echo "build --local_ram_resources=HOST_RAM*.8" >> .bazelrc
        bazel build //... -c opt --repository_cache=/tmp/bazel_repo_cache --jobs ${{parameters.BAZEL_MAX_JOBS}}
        ../tools/bazel_repo_cache.py --noinstall true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} push
        echo "build --local_ram_resources=HOST_RAM*.8" >> .bazelrc

        # we need this for returning 0 when test fails to generate reports later
        bazel test //... -c opt --repository_cache=/tmp/bazel_repo_cache --jobs ${{parameters.BAZEL_MAX_JOBS}} --test_output=errors | tee test_result.log

        ../tools/process-testlog.sh
      caseReportPath: "test-results/TEST-*.xml"
      only:
        triggerType:
          - pullRequest # 创建PR及向PR分支push代码时触发
          - push
        change:
          - psi/*
          - .aci.yml

  Integration test(PSI):
    stage: testing
    component: shell-with-clone
    inputs:
      image: ${{parameters.BUILD_IMAGE}}
      resourceClass: XL
      script: |
        set -e

        git clone --depth=1 git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/bazel_repo_cache.py --nocleanup true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} pull
        echo "build --local_ram_resources=HOST_RAM*.8" >> .bazelrc
        bazel build //psi:main -c opt --repository_cache=/tmp/bazel_repo_cache --jobs ${{parameters.BAZEL_MAX_JOBS}}
        ../tools/bazel_repo_cache.py --noinstall true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} push

        pip install -r examples/psi/requirements.txt

        python examples/psi/generate_psi_data.py --receiver_item_cnt 1e6 \
                --sender_item_cnt 1e6 --intersection_cnt 8e4 --id_cnt 2 \
                --receiver_path /tmp/receiver_input.csv \
                --sender_path /tmp/sender_input.csv \
                --intersection_path /tmp/intersection.csv

        head -n 1 /tmp/intersection.csv > /tmp/sorted_intersection.csv
        tail -n +2 /tmp/intersection.csv | LC_ALL=C sort  --parallel=64 --buffer-size=1G --stable --field-separator=, --key=1,1 --key=2,2 >> /tmp/sorted_intersection.csv
        rm /tmp/intersection.csv
        mv /tmp/sorted_intersection.csv /tmp/intersection.csv

        echo "1. Test ECDH recovery"

        mkdir -p /tmp/ecdh_sender_cache
        mkdir -p /tmp/ecdh_receiver_cache

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_receiver_recovery.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_sender_recovery.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/ecdh_receiver_recovery_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and intersection are identical!(Recovery: 1/2)"
        else
            echo "FAILURE: Receiver output and intersection are different!(Recovery: 1/2)"
            exit 1
        fi

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_receiver_recovery.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_sender_recovery.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/ecdh_receiver_recovery_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and intersection are identical!(Recovery: 2/2)"
        else
            echo "FAILURE: Receiver output and intersection are different!(Recovery: 2/2)"
            exit 1
        fi

        echo "2. Test ECDH inner join"
        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_receiver_inner_join.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_sender_inner_join.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/ecdh_receiver_inner_join_output.csv /tmp/ecdh_sender_inner_join_output.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and sender output are identical!(Inner Join)"
        else
            echo "FAILURE: Receiver output and sender output are different!(Inner Join)"
            exit 1
        fi

        echo "3. Test KKRT recovery"

        mkdir -p /tmp/kkrt_sender_cache
        mkdir -p /tmp/kkrt_receiver_cache

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/kkrt_receiver_recovery.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/kkrt_sender_recovery.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/kkrt_receiver_recovery_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and intersection are identical!(Recovery: 1/2)"
        else
            echo "FAILURE: Receiver output and intersection are different!(Recovery: 1/2)"
            exit 1
        fi

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/kkrt_receiver_recovery.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/kkrt_sender_recovery.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/kkrt_receiver_recovery_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and intersection are identical!(Recovery: 2/2)"
        else
            echo "FAILURE: Receiver output and intersection are different!(Recovery: 2/2)"
            exit 1
        fi

        echo "4. Test RR22 recovery"

        mkdir -p /tmp/rr22_sender_cache
        mkdir -p /tmp/rr22_receiver_cache

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/rr22_receiver_recovery.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/rr22_sender_recovery.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/rr22_receiver_recovery_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and intersection are identical!(Recovery: 1/2)"
        else
            echo "FAILURE: Receiver output and intersection are different!(Recovery: 1/2)"
            exit 1
        fi

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/rr22_receiver_recovery.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/rr22_sender_recovery.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/rr22_receiver_recovery_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Receiver output and intersection are identical!(Recovery: 2/2)"
        else
            echo "FAILURE: Receiver output and intersection are different!(Recovery: 2/2)"
            exit 1
        fi

    only:
      triggerType:
        - pullRequest # 创建PR及向PR分支push代码时触发
        - push


  Integration test(UB PSI):
    stage: testing
    component: shell-with-clone
    inputs:
      image: ${{parameters.BUILD_IMAGE}}
      resourceClass: XL
      script: |
        set -e

        git clone --depth=1 git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/bazel_repo_cache.py --nocleanup true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} pull
        echo "build --local_ram_resources=HOST_RAM*.8" >> .bazelrc
        bazel build //psi:main -c opt --repository_cache=/tmp/bazel_repo_cache --jobs ${{parameters.BAZEL_MAX_JOBS}}
        ../tools/bazel_repo_cache.py --noinstall true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} push

        pip install -r examples/psi/requirements.txt

        python examples/psi/generate_psi_data.py --receiver_item_cnt 1e3 \
                --sender_item_cnt 1e6 --intersection_cnt 1e2 --id_cnt 2 \
                --receiver_path /tmp/client_input.csv \
                --sender_path /tmp/server_input.csv \
                --intersection_path /tmp/intersection.csv

        head -n 1 /tmp/intersection.csv > /tmp/sorted_intersection.csv
        tail -n +2 /tmp/intersection.csv | LC_ALL=C sort  --parallel=64 --buffer-size=1G --stable --field-separator=, --key=1,1 --key=2,2 >> /tmp/sorted_intersection.csv
        rm /tmp/intersection.csv
        mv /tmp/sorted_intersection.csv /tmp/intersection.csv

        openssl rand 32 > /tmp/server_secret_key.key

        echo "Test ECDH Ub PSI"
        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_server_offline_gen_cache.json

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_server_offline_transfer_cache.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_client_offline_transfer_cache.json &
        P2=$!

        wait $P1 $P2

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_server_online.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_client_online.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/client_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Client output and intersection are identical!"
        else
            echo "FAILURE: Client output and intersection are different!"
            exit 1
        fi
        cmp --silent /tmp/server_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Server output and intersection are identical!"
        else
            echo "FAILURE: Server output and intersection are different!"
            exit 1
        fi

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_server_offline.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_client_offline.json &
        P2=$!

        wait $P1 $P2

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_server_online.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/psi/config/ecdh_client_online.json &
        P2=$!

        wait $P1 $P2

        cmp --silent /tmp/client_output.csv /tmp/intersection.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Client output and intersection are identical!"
        else
            echo "FAILURE: Client output and intersection are different!"
            exit 1
        fi

    only:
      triggerType:
        - pullRequest # 创建PR及向PR分支push代码时触发
        - push

  Integration test(PIR):
    stage: testing
    component: shell-with-clone
    inputs:
      image: ${{parameters.BUILD_IMAGE}}
      resourceClass: XL
      script: |
        set -e

        git clone --depth=1 git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/bazel_repo_cache.py --nocleanup true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} pull
        echo "build --local_ram_resources=HOST_RAM*.8" >> .bazelrc
        bazel build //psi:main -c opt --repository_cache=/tmp/bazel_repo_cache --jobs ${{parameters.BAZEL_MAX_JOBS}}
        ../tools/bazel_repo_cache.py --noinstall true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} push

        echo "Test APSI PIR"

        python examples/pir/apsi/test_data_creator.py --sender_size=100000 --receiver_size=1 --intersection_size=1 --label_byte_count=16

        mv db.csv /tmp/db.csv
        mv query.csv /tmp/query.csv
        mv ground_truth.csv /tmp/ground_truth.csv

        rm -rf /tmp/sdb
        cp examples/pir/apsi/parameters/100K-1-16.json /tmp/100K-1-16.json

        ./bazel-bin/psi/main --config $(pwd)/examples/pir/config/apsi_sender_setup.json

        ./bazel-bin/psi/main --config $(pwd)/examples/pir/config/apsi_sender_online.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/pir/config/apsi_receiver.json &
        P2=$!

        wait $P1 $P2

        sort /tmp/ground_truth.csv -o /tmp/sorted_ground_truth.csv
        sort /tmp/result.csv -o /tmp/sorted_result.csv

        cmp --silent /tmp/sorted_ground_truth.csv /tmp/sorted_result.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Ids of client output and input are identical!"
        else
            echo "FAILURE: Ids of client output and input are different!"
            exit 1
        fi

    only:
      triggerType:
        - pullRequest # 创建PR及向PR分支push代码时触发
        - push

  Integration test(Bucketized PIR):
    stage: testing
    component: shell-with-clone
    inputs:
      image: ${{parameters.BUILD_IMAGE}}
      resourceClass: XL
      script: |
        set -e

        git clone --depth=1 git@gitlab.alipay-inc.com:secretflow/tools.git ../tools
        ../tools/bazel_repo_cache.py --nocleanup true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} pull
        echo "build --local_ram_resources=HOST_RAM*.8" >> .bazelrc
        bazel build //psi:main -c opt --repository_cache=/tmp/bazel_repo_cache --jobs ${{parameters.BAZEL_MAX_JOBS}}
        ../tools/bazel_repo_cache.py --noinstall true --ak ${{secrets.oss_cache_id}} --sk ${{secrets.oss_cache_key}} push

        echo "Test APSI PIR"

        python examples/pir/apsi/test_data_creator.py --sender_size=100000 --receiver_size=1 --intersection_size=1  --label_byte_count=16

        mv db.csv /tmp/db.csv
        mv query.csv /tmp/query.csv
        mv ground_truth.csv /tmp/ground_truth.csv

        cp examples/pir/apsi/parameters/100K-1-16.json /tmp/100K-1-16.json

        rm -rf /tmp/apsi_sender_bucket/ && mkdir -p /tmp/apsi_sender_bucket/

        ./bazel-bin/psi/main --config $(pwd)/examples/pir/config/apsi_sender_setup_bucket.json

        ./bazel-bin/psi/main --config $(pwd)/examples/pir/config/apsi_sender_online_bucket.json &
        P1=$!

        ./bazel-bin/psi/main --config $(pwd)/examples/pir/config/apsi_receiver_bucket.json &
        P2=$!

        wait $P1 $P2

        sort /tmp/ground_truth.csv -o /tmp/sorted_ground_truth.csv
        sort /tmp/result.csv -o /tmp/sorted_result.csv

        cmp --silent /tmp/sorted_ground_truth.csv /tmp/sorted_result.csv
        if [[ $? -eq 0 ]]; then
            echo "SUCCESS: Ids of client output and input are identical!"
        else
            echo "FAILURE: Ids of client output and input are different!"
            exit 1
        fi

    only:
      triggerType:
        - pullRequest # 创建PR及向PR分支push代码时触发
        - push
