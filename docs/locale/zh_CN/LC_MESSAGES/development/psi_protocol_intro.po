# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, SecretFlow authors
# This file is distributed under the same license as the SecretFlow PSI
# Library package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: SecretFlow PSI Library \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-27 15:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../development/psi_protocol_intro.rst:2
msgid "PSI Protocols Introduction"
msgstr ""

#: ../../development/psi_protocol_intro.rst:4
msgid "SecretFlow SPU implements the following PSI protocols,"
msgstr ""

#: ../../development/psi_protocol_intro.rst:6
msgid "Semi-honest ECDH-based two-party PSI protocol [HFH99]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:7
msgid "Semi-honest ECDH-based three-party PSI protocol"
msgstr ""

#: ../../development/psi_protocol_intro.rst:8
msgid "Semi-honest OT-based two-party PSI protocol [KKRT16]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:9
msgid "Differentially Private (DP) PSI Protocol [DP-PSI]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:10
msgid "Unbalanced PSI Protocol"
msgstr ""

#: ../../development/psi_protocol_intro.rst:11
msgid ""
"Semi-honest and Malicious VOLE-based two-party PSI protocol [RS21]_ "
"[RR22]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:14
msgid "ECDH-PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:16
msgid ""
"The semi-honest DH-PSI protocol is due to Huberman, Franklin, and Hogg "
"[HFH99]_, but with roots as far back as Meadows [Mea86]_. It is a semi-"
"honest protocol that requires exponentiations in a Diffie-Hellman group "
"proportional to the number of items in the sets."
msgstr ""

#: ../../development/psi_protocol_intro.rst:20
msgid ""
"As a general rule, OT-based PSI protocols are (significantly) faster but "
"require more communication than Diffie-Hellman-based PSI protocols. In "
"some scenarios, communication cost is overwhelmingly more important than "
"computation cost."
msgstr ""

#: ../../development/psi_protocol_intro.rst:24
msgid "DH-PSI protocol based on the Decisional Diffie-Hellman assumption:"
msgstr ""

#: ../../development/psi_protocol_intro.rst:26
msgid "Agree on a group G, with a generator g."
msgstr ""

#: ../../development/psi_protocol_intro.rst:27
msgid ""
"The assumption: for random a,b,c cannot distinguish :math:`(g^a, g^b, "
"g^{ab})` from :math:`(g^a, g^b, g^c)`"
msgstr ""

#: ../../development/psi_protocol_intro.rst:29
msgid ""
"Several candidate groups are widely used, such as subgroups of the "
"multiplication group of a finite field and elliptic curve groups. In "
"practice, carefully chosen elliptic curves like Curve25519 [Ber06]_ offer"
" a good balance between security and performance."
msgstr ""

#: ../../development/psi_protocol_intro.rst:35
msgid ""
"For each element :math:`x_i` in its set, Alice applies the hash function "
"and then exponentiates it using its key :math:`\\alpha`, thus computing "
":math:`{H(x_i)}^\\alpha` . Alice sends "
":math:`\\{\\{H(x_i)\\}^\\alpha\\}_{i=1}^{n_1}` to Bob."
msgstr ""

#: ../../development/psi_protocol_intro.rst:39
msgid ""
"For each element :math:`{H(x_i)}^\\alpha`  received from Alice in the "
"previous step, Bob exponentiates it using its key :math:`\\beta`, "
"computing :math:`{H(x_i)}^{\\alpha\\beta}`. Bob sends "
":math:`{\\{\\{H(x_i)\\}^{\\alpha\\beta}\\}}_{i=1}^{n_1}` to Alice."
msgstr ""

#: ../../development/psi_protocol_intro.rst:43
msgid ""
"For each element :math:`y_i` in its set, Bob applies the hash function "
"and then exponentiates it using its key :math:`\\beta`, thus computing "
":math:`{H(y_i)}^\\beta` . Bob sends the set "
":math:`\\{\\{H(y_i)\\}^\\beta\\}_{i=1}^{n_2}` to Alice."
msgstr ""

#: ../../development/psi_protocol_intro.rst:47
msgid ""
"For each element :math:`{H(y_i)}^\\beta`  received from Bob in the "
"previous step, Alice exponentiates it using its key :math:`\\alpha`, "
"computing :math:`{H(y_i)}^{\\beta\\alpha}` ."
msgstr ""

#: ../../development/psi_protocol_intro.rst:50
msgid ""
"Alice compares two set "
":math:`{\\{\\{H(x_i)\\}^{\\alpha\\beta}\\}}_{i=1}^{n_1}` and "
":math:`{\\{\\{H(y_i)\\}^{\\beta\\alpha}\\}}_{i=1}^{n_2}`  and gets "
"intersection."
msgstr ""

#: ../../development/psi_protocol_intro.rst:53
msgid "The Elliptic Curve groups, supported in secretflow SPU PSI module."
msgstr ""

#: ../../development/psi_protocol_intro.rst:56
msgid "EC group"
msgstr ""

#: ../../development/psi_protocol_intro.rst:56
#: ../../development/psi_protocol_intro.rst:362
msgid "Reference"
msgstr ""

#: ../../development/psi_protocol_intro.rst:56
msgid "CryptoLib"
msgstr ""

#: ../../development/psi_protocol_intro.rst:58
msgid "Curve25519"
msgstr ""

#: ../../development/psi_protocol_intro.rst:58
msgid "[Ber06]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:58
msgid "`LibSoidum <https://doc.libsodium.org/>`_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:60
msgid "[ipp-crypto]_ (IntelÂ® CPU support AVX-512 IFMA)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:62
msgid "Secp256k1"
msgstr ""

#: ../../development/psi_protocol_intro.rst:62
msgid "[SEC2-v2]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:62
#: ../../development/psi_protocol_intro.rst:64
msgid "`OpenSSL <https://www.openssl.org>`_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:64
msgid "SM2"
msgstr ""

#: ../../development/psi_protocol_intro.rst:64
msgid "GBT.32918.1-2016"
msgstr ""

#: ../../development/psi_protocol_intro.rst:66
msgid "ISO/IEC 14888-3:2018"
msgstr ""

#: ../../development/psi_protocol_intro.rst:68
msgid "FourQ"
msgstr ""

#: ../../development/psi_protocol_intro.rst:68
msgid "[FourQ]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:68
msgid "`FourQlib <https://github.com/microsoft/FourQlib>`_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:72
msgid "ECDH-PSI (3P)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:74
msgid ""
"We implement our own three-party PSI protocol based on ECDH. Note that "
"our implementation has known leakage, please use at your own risk."
msgstr ""

#: ../../development/psi_protocol_intro.rst:77
msgid ""
"Assume Alice, Bob, Charlie (receiver) want to perform 3P PSI, in addition"
" to the final output, our protocol leaks the intersection size of Alice's"
" data and Bob's data to Charlie."
msgstr ""

#: ../../development/psi_protocol_intro.rst:82
msgid ""
"Note that at the beginning of ECDH-PSI protocol, we assume the input data"
" from both Alice and Charlie are shuffled (It's not necessary to shuffle "
"Bob's set)."
msgstr ""

#: ../../development/psi_protocol_intro.rst:85
#: ../../development/psi_protocol_intro.rst:150
msgid "Protocol:"
msgstr ""

#: ../../development/psi_protocol_intro.rst:87
msgid ""
"For i-th element in its set, Alice calculates :math:`H(x_i)^\\alpha` and "
"sends to Bob."
msgstr ""

#: ../../development/psi_protocol_intro.rst:89
msgid ""
"For i-th element, Bob calculates :math:`H(x_i)^{\\alpha\\beta}` and "
":math:`H(y_i)^\\beta`, then shuffles them randomly and sends them to "
"Alice."
msgstr ""

#: ../../development/psi_protocol_intro.rst:92
msgid ""
"For i-th element, Alice calculates :math:`H(y_i)^{\\alpha\\beta}` and "
"gets the intersection of :math:`H(x_i)^{\\alpha\\beta} \\cap "
"H(y_i)^{\\alpha\\beta}` (we denote the intersection as "
":math:`I^{\\alpha\\beta}`), then sends :math:`I^{\\alpha\\beta}` to "
"Charlie."
msgstr ""

#: ../../development/psi_protocol_intro.rst:96
msgid ""
"For i-th element, Charlie sends :math:`H(z_i)^{\\gamma}` to Bob, Bob "
"calculates and sends to Alice :math:`H(z_i)^{\\beta\\gamma}`, finally "
"Alice calculates and sends to Charlie "
":math:`H(z_i)^{\\alpha\\beta\\gamma}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:100
msgid ""
"Charlie calculates :math:`I^{\\alpha\\beta\\gamma}` and compares "
":math:`I^{\\alpha\\beta\\gamma}` with "
":math:`H(z_i)^{\\alpha\\beta\\gamma}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:104
msgid "KKRT16-PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:106
msgid ""
"[KKRT16]_ is semi-honest OT-based PSI, based on OT Extension, BaRK-OPRF "
"and CuckooHash. [KKRT16]_ is the first PSI protocol requiring only one "
"minute for the case of larger sets ( :math:`2^{24}` items each) of long "
"strings (128 bits)."
msgstr ""

#: ../../development/psi_protocol_intro.rst:110
msgid "We use 3-way stash-less CuckooHash proposed in [PSZ18]_."
msgstr ""

#: ../../development/psi_protocol_intro.rst:114
msgid ""
"Sender and Receiver Agree on CuckooHash :math:`h_1,h_2,h_3: "
"{\\{0,1\\}}^{*} \\rightarrow [m]`"
msgstr ""

#: ../../development/psi_protocol_intro.rst:115
msgid ""
"Receiver inserts each x into bin :math:`h_1(x)`, :math:`h_2(x)` or "
":math:`h_3(x)`"
msgstr ""

#: ../../development/psi_protocol_intro.rst:116
msgid ""
"Sender inserts each y into bin :math:`h_1(y)`, :math:`h_2(y)` and "
":math:`h_3(y)`"
msgstr ""

#: ../../development/psi_protocol_intro.rst:117
msgid ""
"Run BaRK-OPRF, Receiver gets :math:`F_{s,k_i}(x)`,Sender gets "
":math:`F_{s,k_i}(y)`, for :math:`bin_i`"
msgstr ""

#: ../../development/psi_protocol_intro.rst:118
msgid "Sender sends all :math:`\\{F_{s,k_i}(y)\\}` values to Receiver"
msgstr ""

#: ../../development/psi_protocol_intro.rst:119
msgid "Receiver compares two BaRK-OPRFs set and obtains the intersection."
msgstr ""

#: ../../development/psi_protocol_intro.rst:123
msgid "Differentially Private PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:125
msgid ""
"We also implement a Differentially Private (DP) Private Set Intersection "
"(PSI) Protocol. Our implementation bases on ECDH-PSI, and provides:"
msgstr ""

#: ../../development/psi_protocol_intro.rst:128
msgid "Differentially private PSI results."
msgstr ""

#: ../../development/psi_protocol_intro.rst:130
msgid "This feature is currently under test, please use at your own risk!"
msgstr ""

#: ../../development/psi_protocol_intro.rst:132
msgid ""
"Why PSI with differentially private results? If we want a scheme that "
"protects both the private inputs and output privacy, an ideal way is to "
"use `circuit PSI`, which is a typical PSI variant that allows secure "
"computation (e.g. MPC or HE) on the PSI result without revealing it. "
"`PSTY19 <https://eprint.iacr.org/2019/241.pdf>`_ However those protocols "
"are expensive in terms of efficiency."
msgstr ""

#: ../../development/psi_protocol_intro.rst:139
msgid ""
"DP-PSI is a way of utilizing the up-sampling and sub-sampling mechanism "
"to add calibrated noises to the PSI results, without revealing its "
"concise value."
msgstr ""

#: ../../development/psi_protocol_intro.rst:142
msgid ""
"The protocol is listed below, assume Alice has a (hashed and shuffled) "
"set :math:`X` and Bob has a (hashed and shuffled) :math:`Y`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:147
msgid ""
"Note that we use \"encrypt\" to denote the process of calculating "
":math:`y\\gets x^a`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:152
msgid ""
"Alice and Bob first encrypts their own dataset, and gets :math:`X^a` and "
":math:`Y^b` separately."
msgstr ""

#: ../../development/psi_protocol_intro.rst:155
msgid "Alice sends :math:`X^a` to Bob."
msgstr ""

#: ../../development/psi_protocol_intro.rst:157
msgid ""
"Bob performs random subsampling on :math:`Y^b`, gets :math:`Y_*^b` and "
"sends it to Alice. In the meantime, on receiving :math:`X^a` from Alice, "
"Bob re-encrypts it with :math:`b`, gets :math:`X^{ab}`. Then it samples a"
" random permutation :math:`\\pi` to permute Alice's set, and sends "
"permuted :math:`\\pi(X^{ab})` back to Alice."
msgstr ""

#: ../../development/psi_protocol_intro.rst:163
msgid ""
"On receiving :math:`Y_*^b` and :math:`\\pi(X^{ab})` from Bob, Alice re-"
"encrypts :math:`Y_*^b` and gets :math:`Y_*^{ab}`, then calculates the "
"intersection :math:`I_*^{ab}\\gets\\pi(X^{ab})\\cap Y_*^{ab}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:167
msgid ""
"Alice randomly subsamples the intersection, gets :math:`I_{**}^{ab}`, and"
" then finds their corresponding index in :math:`Y_*^b`. Then randomly "
"adds non-intersection index to this set."
msgstr ""

#: ../../development/psi_protocol_intro.rst:171
msgid "Alice sends the index set to Bob, then Bob reveals the final results."
msgstr ""

#: ../../development/psi_protocol_intro.rst:173
msgid ""
"In the end, this scheme ensures that the receiver (Bob) only learns the "
"noised intersection, without the ability of pointing out whether an "
"element is in the actual set intersection or not."
msgstr ""

#: ../../development/psi_protocol_intro.rst:177
msgid ""
"Note that multiple invocations of DP-PSI inevitably weaken the privacy "
"protection, therefore, we strongly suggest that user should implement a "
"protection mechanism to prevent multiple DP-PSI executions on the same "
"input value."
msgstr ""

#: ../../development/psi_protocol_intro.rst:183
msgid "Intel(R) Xeon(R) Platinum"
msgstr ""

#: ../../development/psi_protocol_intro.rst:183
msgid "2^20"
msgstr ""

#: ../../development/psi_protocol_intro.rst:183
msgid "2^21"
msgstr ""

#: ../../development/psi_protocol_intro.rst:183
msgid "2^22"
msgstr ""

#: ../../development/psi_protocol_intro.rst:183
msgid "2^23"
msgstr ""

#: ../../development/psi_protocol_intro.rst:183
msgid "2^24"
msgstr ""

#: ../../development/psi_protocol_intro.rst:185
msgid "DP-PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:185
msgid "9.806s"
msgstr ""

#: ../../development/psi_protocol_intro.rst:185
msgid "20.134s"
msgstr ""

#: ../../development/psi_protocol_intro.rst:185
msgid "42.067s"
msgstr ""

#: ../../development/psi_protocol_intro.rst:185
msgid "86.580s"
msgstr ""

#: ../../development/psi_protocol_intro.rst:185
msgid "170.359s"
msgstr ""

#: ../../development/psi_protocol_intro.rst:188
msgid ""
"For DP, our default privacy protection strength is :math:`\\epsilon=3`. "
"For more details, please refer to the original paper: [DP-PSI]_"
msgstr ""

#: ../../development/psi_protocol_intro.rst:192
#: ../../development/psi_protocol_intro.rst:243
msgid "Unbalanced PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:195
msgid "Ecdh-OPRF based PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:197
msgid ""
"[RA18]_ section 3 introduces Basic Unbalanced PSI(Ecdh-OPRF based) "
"protocol proposed in [BBCD+11]_ that relaxes the security of the [JL10]_ "
"to be secure against semi-honest adversaries. The protocol has two "
"phases, the preprocessing phase and the online phase. The authors "
"introduced many optimizations to push as much computation and "
"communication cost to the preprocessing phase as possible."
msgstr ""

#: ../../development/psi_protocol_intro.rst:202
msgid ""
"An Oblivious Pseudorandom Function (OPRF) is a two-party protocol between"
" client and server for computing the output of a Pseudorandom Function "
"(PRF). [draft-irtf-cfrg-voprf-10]_ specifies OPRF, VOPRF, and POPRF "
"protocols built upon prime-order groups."
msgstr ""

#: ../../development/psi_protocol_intro.rst:208
msgid "Offline Phase"
msgstr ""

#: ../../development/psi_protocol_intro.rst:210
msgid ""
"For each element :math:`y_i` in its set, Bob applies PRF using private "
"key :math:`\\beta`, i.e. computing :math:`H_2(y_i,{H_1(y_i)}^\\beta)` ."
msgstr ""

#: ../../development/psi_protocol_intro.rst:213
msgid ""
"Bob sends :math:`\\{\\{H_2(y_i,{H_1(y_i)}^\\beta)\\}\\}_{i=1}^{n_2}` to "
"Alice in shuffled order."
msgstr ""

#: ../../development/psi_protocol_intro.rst:215
msgid "Online Phase"
msgstr ""

#: ../../development/psi_protocol_intro.rst:217
msgid ""
"For each element :math:`x_i` in its set, Alice applies the hash function "
"and then exponentiates it using its blind key :math:`r_i`, thus computing"
" :math:`{H_1(x_i)}^{r_i}`. Alice sends "
":math:`\\{\\{H_1(x_i)\\}^{r_i}\\}_{i=1}^{n_1}` to Bob."
msgstr ""

#: ../../development/psi_protocol_intro.rst:220
msgid ""
"For each element :math:`H_1(x_i)^{r_i}` received from Alice in the "
"previous step, Bob exponentiates it using its key :math:`\\beta`, "
"computing :math:`{H_1(x_i)}^{r_i\\beta}`. Bob sends "
":math:`{\\{\\{H_1(x_i)\\}^{\\{r_i\\}\\beta}\\}}_{i=1}^{n_1}` to Alice."
msgstr ""

#: ../../development/psi_protocol_intro.rst:223
msgid ""
"Alice receives :math:`{\\{\\{H_1(x_i)\\}^{r_i\\beta}\\}}_{i=1}^{n_1}` "
"from Bob, and unblinds it using :math:`r_i`, gets "
":math:`\\{\\{\\{H_1(x_i)\\}^\\beta\\}\\}_{i=1}^{n_1}`, computes OPRF "
":math:`\\{\\{H_2(x_i,{H_1(x_i)}^\\beta)\\}\\}_{i=1}^{n_1}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:225
msgid ""
"Alice compares two sets "
":math:`\\{\\{H_2(x_i,{H_1(x_i)}^\\beta)\\}\\}_{i=1}^{n_1}` and "
":math:`\\{\\{H_2(y_i,{H_1(y_i)}^\\beta)\\}\\}_{i=1}^{n_2}` and gets "
"intersection."
msgstr ""

#: ../../development/psi_protocol_intro.rst:229
#: ../../development/psi_protocol_intro.rst:245
msgid "Labeled PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:231
msgid ""
"Somewhat homomorphic encryption (SHE) can be used to build efficient "
"(labeled) Private Set Intersection protocols in the unbalanced setting, "
"where one of the sets is much larger than the other. [CMGD+21]_ "
"introduces several optimizations and improvements to the protocols of "
"[CLR17]_, [CHLR18]_, resulting in improved running time and improved "
"communication complexity in the sender's set size."
msgstr ""

#: ../../development/psi_protocol_intro.rst:237
msgid ""
"Microsoft `APSI (Asymmetric PSI) <https://github.com/microsoft/APSI>`_  "
"library provides a PSI functionality for asymmetric set sizes based on "
"the latest [CMGD+21]_.  APSI uses the BFV([FV12]_) encryption scheme "
"implemented in the Microsoft [SEAL]_ library."
msgstr ""

#: ../../development/psi_protocol_intro.rst:241
msgid ""
"SecretFlow SPU wraps `APSI <https://github.com/microsoft/APSI>`_ library,"
" can be used for"
msgstr ""

#: ../../development/psi_protocol_intro.rst:244
msgid "Malicious PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:246
msgid "Keyword PIR"
msgstr ""

#: ../../development/psi_protocol_intro.rst:250
msgid "Setup Phase"
msgstr ""

#: ../../development/psi_protocol_intro.rst:252
msgid "**Choose ItemParams**, TableParams, QueryParams, SEALParams."
msgstr ""

#: ../../development/psi_protocol_intro.rst:253
msgid ""
"**Sender's OPRF**: The sender samples a key :math:`\\beta` for the OPRF, "
"updates its items set to "
":math:`\\{\\{H_2(s_i,{H_1(s_i)}^\\beta)\\}\\}_{s_i\\in S}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:255
msgid ""
"**Sender's Hashing**: Sender inserts all :math:`s_i\\in S` into the sets "
":math:`\\mathcal{B}[h_0(s_i)]`, :math:`\\mathcal{B}[h_1(s_i)]` and "
":math:`\\mathcal{B}[h_2(s_i)]`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:257
msgid ""
"**Splitting**: For each set :math:`\\mathcal{B}[i]`, the sender splits it"
" into bin bundles, denoted as :math:`\\mathcal{B}[i,1]`, ..., "
":math:`\\mathcal{B}[i,k]`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:259
msgid "**Computing Coeffcients**:"
msgstr ""

#: ../../development/psi_protocol_intro.rst:261
msgid ""
"**Matching Polynomial**: For each bin bundle :math:`\\mathcal{B}[i,j]`, "
"the sender computes the matching polynomial over :math:`\\mathbb{F}_t`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:263
msgid ""
"**Label Polynomial**: If the sender has labels associated with its set, "
"then for each bin bundle :math:`\\mathcal{B}[i,j]`, the sender "
"interpolates the label polynomial over :math:`\\mathbb{F}_t`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:266
msgid "Intersection Phase"
msgstr ""

#: ../../development/psi_protocol_intro.rst:268
msgid "Receiver Encrypt :math:`r_i \\in R`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:270
msgid ""
"**Receiver's OPRF**: Receiver and Sender run ecdh-OPRF protocol, get "
":math:`\\{\\{H_2(r_i,{H_1(r_i)}^\\beta)\\}\\}_{r_i\\in R}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:272
msgid ""
"**Receiver's CuckooHash**: Receiver performs cuckoo hashing on the set "
":math:`R` into CuckooTable C with m bins using h1; h2; h3 has the hash "
"functions."
msgstr ""

#: ../../development/psi_protocol_intro.rst:274
msgid ""
"**Packing**: Receiver packs items in CuckooTable C into a FHE plaintext "
"polynomial."
msgstr ""

#: ../../development/psi_protocol_intro.rst:275
msgid "**Windowsing**: the receiver computes the component-wise query powers."
msgstr ""

#: ../../development/psi_protocol_intro.rst:276
msgid ""
"**Encrypt**: The receiver uses *FHE.Encrypt* to encrypt query powers and "
"sends the ciphertexts to the sender."
msgstr ""

#: ../../development/psi_protocol_intro.rst:278
msgid ""
"**Sender Homomorphically evaluate Matching Polynomial**: The sender "
"receives the collection of ciphertexts and homomorphically evaluates "
"Matching Polynomial. If Labeled PSI is desired, Sender homomorphically "
"evaluates Label Polynomial. The sender sends evaluated ciphertexts to "
"Receiver."
msgstr ""

#: ../../development/psi_protocol_intro.rst:281
msgid ""
"**Receiver Decrypt and Get result**: receiver receives and decrypts the "
"matching ciphertexts, and labels ciphertexts if needed, outputs the "
"matching set and labels."
msgstr ""

#: ../../development/psi_protocol_intro.rst:284
msgid "Labeled PSI Parameters"
msgstr ""

#: ../../development/psi_protocol_intro.rst:287
msgid "Params"
msgstr ""

#: ../../development/psi_protocol_intro.rst:287
msgid "function"
msgstr ""

#: ../../development/psi_protocol_intro.rst:289
msgid "1"
msgstr ""

#: ../../development/psi_protocol_intro.rst:289
msgid "ItemParams"
msgstr ""

#: ../../development/psi_protocol_intro.rst:291
msgid "felts_per_item"
msgstr ""

#: ../../development/psi_protocol_intro.rst:291
msgid ""
"how many Microsoft SEAL batching slots should represent each item = "
"item_bit_size / plain_modulus_bits item_bit_size = stats_params + "
"log(ns)+log(nr)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:295
msgid "2"
msgstr ""

#: ../../development/psi_protocol_intro.rst:295
msgid "TableParams"
msgstr ""

#: ../../development/psi_protocol_intro.rst:297
msgid "hash_func_count"
msgstr ""

#: ../../development/psi_protocol_intro.rst:297
msgid ""
"cuckoo hash count. if nr>1,hash_func_count = 3 nr=1-> hash_func_count=1 "
"means essentially disabling cuckoo hashing"
msgstr ""

#: ../../development/psi_protocol_intro.rst:300
msgid "table_size"
msgstr ""

#: ../../development/psi_protocol_intro.rst:300
msgid "positive multiple of floor(poly_modulus_degree/felts_per_item)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:302
msgid "max_items_per_bin"
msgstr ""

#: ../../development/psi_protocol_intro.rst:302
msgid "how many items fit into each row of the sender's bin bundles"
msgstr ""

#: ../../development/psi_protocol_intro.rst:304
msgid "3"
msgstr ""

#: ../../development/psi_protocol_intro.rst:304
msgid "QueryParams"
msgstr ""

#: ../../development/psi_protocol_intro.rst:306
msgid "ps_low_degree"
msgstr ""

#: ../../development/psi_protocol_intro.rst:306
msgid ""
"any number between 0 and max_items_per_bin If set to zero, the Paterson-"
"Stockmeyer algorithm is not used ps_low_degree > 1, use Paterson-"
"Stockmeyer algorithm"
msgstr ""

#: ../../development/psi_protocol_intro.rst:310
msgid "query_powers"
msgstr ""

#: ../../development/psi_protocol_intro.rst:310
msgid ""
"how many items fit into each row of the sender's bin bundles ref Challis "
"and Robinson (2010) to determine good source powers"
msgstr ""

#: ../../development/psi_protocol_intro.rst:313
msgid "4"
msgstr ""

#: ../../development/psi_protocol_intro.rst:313
msgid "SEALParams"
msgstr ""

#: ../../development/psi_protocol_intro.rst:315
msgid "poly_modulus_degree"
msgstr ""

#: ../../development/psi_protocol_intro.rst:315
msgid "2048 /  4096 / 8192"
msgstr ""

#: ../../development/psi_protocol_intro.rst:317
msgid "plain_modulus(_bits)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:317
msgid "16(65535) / 22(bits)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:319
msgid "coeff_modulus_bits"
msgstr ""

#: ../../development/psi_protocol_intro.rst:319
msgid "{48} / {48, 30, 30} / {56, 56, 56, 50}"
msgstr ""

#: ../../development/psi_protocol_intro.rst:323
msgid "RR22 Blazing Fast PSI"
msgstr ""

#: ../../development/psi_protocol_intro.rst:325
msgid ""
"[RS21]_ introduced an efficient PSI protocol based on OKVS and VOLE. "
"[RR22]_ present significant improvements to the OKVS data structure along"
" with new techniquesfor further reducing the communication overhead of "
"[RS]21."
msgstr ""

#: ../../development/psi_protocol_intro.rst:328
msgid ""
"Oblivous Key-Value Stores(OKVS) consists of algorithms Encode and Decode."
" Encode takes a list of key-value (k,v) pairs as input and returns an "
"abstract data structure S. Decode takes such a data structure S and a key"
" k' as input, and gives some output v'."
msgstr ""

#: ../../development/psi_protocol_intro.rst:332
msgid ""
"Pseudorandom correlation generators(PCGs) allow for the efficient "
"generation of oblivious transfer (OT) and vector oblivious linear "
"evaluations (VOLE) with sublinear communication and concretely good "
"computational overhead. PCG makes use of a so-called LPN-friendly "
"errorcorrecting code. `secretflow/YACL "
"<https://github.com/secretflow/yacl>`_  provides VOLE code "
"implementation. LPN-friendly coeds now support [CRR21]_ silver "
"codes(LDPC) and [BCGI+22]_ Expand-Accumulate Codes. Silver is Most "
"efficient, but not recommended to use due to its security flaw."
msgstr ""

#: ../../development/psi_protocol_intro.rst:340
msgid "Semi-honest Protocol:"
msgstr ""

#: ../../development/psi_protocol_intro.rst:344
msgid ""
"The Receiver samples :math:`r \\leftarrow \\{0,1\\}^\\kappa` and computes"
" :math:`\\vec{P} :=  \\mathrm{Encode} (L,r)` where :math:`L := "
"\\{(H^{n*m}(x,r),H(x))|x \\in X\\}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:348
msgid ""
"Sender and Receiver Run (sub)VOLE protocol, Sender gets :math:`\\Delta` "
"and :math:`\\vec{B}`, Receiver gets :math:`\\vec{A}` and "
":math:`\\vec{C}`, such that: :math:`\\vec{C}=\\Delta "
"*\\vec{A'}+\\vec{B}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:352
msgid ""
"Receiver sends :math:`r, \\vec{A}=\\vec{A'}+\\vec{P}` to Sender. Sender "
"defines :math:`\\vec{K}=\\vec{B}+\\Delta \\cdot \\vec{A}`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:355
msgid ""
"Sender sends :math:`Y'=H^{n*m}(\\vec{Y},r)\\cdot \\vec{K}-\\Delta \\cdot "
"H(\\vec{Y})` to the Receiver."
msgstr ""

#: ../../development/psi_protocol_intro.rst:358
msgid ""
"Receiver compares :math:`X'=H^{n*m}(\\vec{X},r)\\cdot \\vec{C}` and "
":math:`Y'`, outputs intersection result :math:`X \\cap Y`."
msgstr ""

#: ../../development/psi_protocol_intro.rst:364
msgid ""
"E. Boyle, G. Couteau, N. Gilboa, and Y. Ishai. Compressing vector OLE. In"
" ACM CCS 2018, pages 896â912. ACM Press, October 2018."
msgstr ""

#: ../../development/psi_protocol_intro.rst:367
#: ../../development/psi_protocol_intro.rst:371
msgid ""
"E. Boyle, G. Couteau, N. Gilboa, Y. Ishai, L. Kohl, P. Rindal, and P. "
"Scholl. Efficient two-round OT extension and silent non-interactive "
"secure computation. In ACM CCS 2019, pages 291â308. ACM Press, November "
"2019."
msgstr ""

#: ../../development/psi_protocol_intro.rst:375
msgid ""
"Daniel J. Bernstein. Curve25519: new diffie-hellman speed records. In In "
"Public Key Cryptography (PKC), Springer-Verlag LNCS 3958, page 2006, "
"2006. (Cited on page 4.)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:378
msgid ""
"Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, "
"Nicolas Resch, Peter Scholl. Correlated Pseudorandomness from Expand-"
"Accumulate Codes. Crypto2022."
msgstr ""

#: ../../development/psi_protocol_intro.rst:381
msgid ""
"Baldi, P., Baronio, R., Cristofaro, E.D., Gasti, P., Tsudik, G.: "
"Countering GATTACA: Efficient and Secure Testing of Fully-sequenced Human"
" Genomes. In: ACM Conference on Computer and Communications Security. pp."
" 691â702. ACM (2011)."
msgstr ""

#: ../../development/psi_protocol_intro.rst:385
msgid ""
"G. Couteau, Y. Ishai, L. Kohl, E. Boyle, P. Scholl, and N. Gilboa. "
"Efficient pseudorandom correlation generators from ring-lpn. Springer-"
"Verlag, 2020."
msgstr ""

#: ../../development/psi_protocol_intro.rst:388
msgid ""
"Chen, H., Huang, Z., Laine, K., Rindal, P.: Labeled PSI from fully "
"homomorphic encryption with malicious security. In: Lie, D., Mannan, M., "
"Backes, M., Wang, X. (eds.) ACM CCS 2018. pp. 1223{1237. ACM Press (Oct "
"2018). https://doi.org/10.1145/3243734.3243836"
msgstr ""

#: ../../development/psi_protocol_intro.rst:392
msgid ""
"Chen, H., Laine, K., Rindal, P.: Fast private set intersection from "
"homomorphic encryption. In: Thuraisingham, B.M., Evans, D., Malkin, T., "
"Xu, D. (eds.) ACM CCS 2017. pp. 1243{1255. ACM Press (Oct / Nov 2017). "
"https://doi.org/10.1145/3133956.3134061"
msgstr ""

#: ../../development/psi_protocol_intro.rst:396
msgid ""
"Kelong Cong, Radames Cruz Moreno, Mariana Botelho da Gama, Wei Dai, Ilia "
"Iliashenko, Kim Laine, Michael Rosenberg. Labeled PSI from Homomorphic "
"Encryption with Reduced Computation and Communication CCS'21: Proceedings"
" of the 2021 ACM SIGSAC Conference on Computer and Communications "
"SecurityNovember 2021"
msgstr ""

#: ../../development/psi_protocol_intro.rst:400
msgid ""
"Geoffroy Couteau, Peter Rindal, and Srinivasan Raghuraman. Silver: Silent"
" VOLE and Oblivious Transfer from Hardness of Decoding Structured LDPC "
"Codes. Crypto2021."
msgstr ""

#: ../../development/psi_protocol_intro.rst:403
msgid "Differentially-Private PSI https://arxiv.org/pdf/2208.13249.pdf"
msgstr ""

#: ../../development/psi_protocol_intro.rst:405
msgid ""
"Costello, C., Longa, P.: Fourq: four-dimensional decompositions on a "
"q-curve over the mersenne prime. Cryptology ePrint Archive, Report "
"2015/565 (2015), https://eprint.iacr.org/2015/565"
msgstr ""

#: ../../development/psi_protocol_intro.rst:408
msgid ""
"Fan, J., Vercauteren, F.: Somewhat practical fully homomorphic "
"encryption. Cryptology ePrint Archive, Report 2012/144 (2012), "
"http://eprint.iacr.org/2012/144.pdf"
msgstr ""

#: ../../development/psi_protocol_intro.rst:411
msgid ""
"Bernardo A. Huberman, Matt Franklin, and Tad Hogg. Enhancing privacy and "
"trust in electronic communities. In ACM CONFERENCE ON ELECTRONIC "
"COMMERCE. ACM, 1999."
msgstr ""

#: ../../development/psi_protocol_intro.rst:414
msgid "https://github.com/intel/ipp-crypto/"
msgstr ""

#: ../../development/psi_protocol_intro.rst:416
msgid ""
"Jarecki, S., Liu, X.: Fast Secure Computation of Set Intersection. In: "
"SCN. LNCS, vol. 6280, pp. 418â435. Springer (2010)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:419
msgid ""
"V. Kolesnikov, R. Kumaresan, M. Rosulek, and N. Trieu. Efficient batched "
"oblivious PRF with applications to private set intersection. In ACM CCS "
"2016, pages 818â829. ACM Press, October 2016."
msgstr ""

#: ../../development/psi_protocol_intro.rst:422
msgid ""
"C. Meadows. A more efficient cryptographic matchmaking protocol for use "
"in the absence of a continuously available third party. In 1986 IEEE "
"Symposium on Security and Privacy, pages 134â134, April 1986."
msgstr ""

#: ../../development/psi_protocol_intro.rst:425
msgid ""
"B. Pinkas, T. Schneider, and M. Zohner. Scalable private set intersection"
" based on ot extension. ACM Transactions on Privacy and Security (TOPS), "
"21(2):1â35, 2018."
msgstr ""

#: ../../development/psi_protocol_intro.rst:428
msgid ""
"Resende, A.C.D., Aranha, D.F.: Faster unbalanced private set "
"intersection. In: Meiklejohn, S., Sako, K. (eds.) FC2018. LNCS, vol. "
"10957, pp. 203{221. Springer, Heidelberg (Feb / Mar 2018)"
msgstr ""

#: ../../development/psi_protocol_intro.rst:431
msgid ""
"Srinivasan Raghuraman and Peter Rindal. Blazing Fast PSI from Improved "
"OKVS and Subfield VOLE. CCS'22."
msgstr ""

#: ../../development/psi_protocol_intro.rst:433
msgid ""
"Srinivasan Raghuraman, Peter Rindal, Titouan Tanguy. Expand-Convolute "
"Codes for Pseudorandom Correlation Generators from LPN. Crypto2023."
msgstr ""

#: ../../development/psi_protocol_intro.rst:436
msgid ""
"Peter Rindal and Phillipp Schoppmann. VOLE-PSI: fast OPRF and circuit-psi"
" from vector-ole. EUROCRYPT2021."
msgstr ""

#: ../../development/psi_protocol_intro.rst:438
msgid ""
"Microsoft SEAL (release 4.0). https://github.com/Microsoft/SEAL (Sep "
"2022), microsoft Research, Redmond, WA."
msgstr ""

#: ../../development/psi_protocol_intro.rst:441
msgid ""
"Standards for Efficient Cryptography (SEC) "
"<http://www.secg.org/sec2-v2.pdf>"
msgstr ""

#: ../../development/psi_protocol_intro.rst:443
msgid ""
"P. Schoppmann, A. GascÃ³n, L. Reichert, and M. Raykova. Distributed "
"vector-OLE: Improved constructions and implementation. In ACM CCS 2019, "
"pages 1055â1072. ACM Press, November 2019."
msgstr ""

#: ../../development/psi_protocol_intro.rst:446
msgid ""
"C. Weng, K. Yang, J. Katz, and X. Wang. Wolverine: fast, scalable, and "
"communication-efficient zero-knowledge proofs for boolean and arithmetic "
"circuits. In 2021 IEEE Symposium on Security and Privacy (SP), pages "
"1074â1091. IEEE, 2021."
msgstr ""

#: ../../development/psi_protocol_intro.rst:450
msgid ""
"Oblivious Pseudorandom Functions (OPRFs) using Prime-Order Groups. "
"https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-10.html"
msgstr ""

