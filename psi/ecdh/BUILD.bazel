# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:psi.bzl", "psi_cc_binary", "psi_cc_library", "psi_cc_test")

package(default_visibility = ["//visibility:public"])

psi_cc_library(
    name = "ecdh_oprf",
    srcs = ["ecdh_oprf.cc"],
    hdrs = ["ecdh_oprf.h"],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        "//psi/cryptor:ecc_cryptor",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/types:span",
        "@yacl//yacl/base:byte_container_view",
        "@yacl//yacl/base:exception",
        "@yacl//yacl/utils:parallel",
    ],
)

psi_cc_library(
    name = "ecdh_oprf_selector",
    srcs = ["ecdh_oprf_selector.cc"],
    hdrs = ["ecdh_oprf_selector.h"],
    deps = [
        ":basic_ecdh_oprf",
        "@yacl//yacl/utils:platform_utils",
    ],
)

psi_cc_library(
    name = "basic_ecdh_oprf",
    srcs = ["basic_ecdh_oprf.cc"],
    hdrs = ["basic_ecdh_oprf.h"],
    defines = [
        "__LINUX__",
    ] + select({
        "@bazel_tools//src/conditions:linux_x86_64": [
            "_AMD64_",
            "_ASM_",
        ],
        "@bazel_tools//src/conditions:darwin_arm64": [
            "_ARM64_",
        ],
        "//conditions:default": [
            "_AMD64_",
        ],
    }),
    deps = [
        ":ecdh_oprf",
        "//psi/cryptor:ecc_utils",
        "//psi/cryptor:sm2_cryptor",
        "@com_github_microsoft_apsi//:apsi",
        "@com_google_absl//absl/types:span",
        "@yacl//yacl/base:exception",
        "@yacl//yacl/crypto/hash:blake3",
        "@yacl//yacl/crypto/hash:hash_utils",
        "@yacl//yacl/utils:parallel",
    ],
)

psi_cc_test(
    name = "basic_ecdh_oprf_test",
    srcs = ["basic_ecdh_oprf_test.cc"],
    deps = [
        ":ecdh_oprf_selector",
        "@yacl//yacl/crypto/rand",
        "@yacl//yacl/crypto/tools:prg",
    ],
)

psi_cc_library(
    name = "ecdh_psi",
    srcs = ["ecdh_psi.cc"],
    hdrs = ["ecdh_psi.h"],
    deps = [
        ":ecdh_logger",
        "//psi/cryptor:cryptor_selector",
        "//psi/utils:batch_provider",
        "//psi/utils:communication",
        "//psi/utils:ec_point_store",
        "//psi/utils:recovery",
        "@com_google_absl//absl/strings",
        "@yacl//yacl/link",
        "@yacl//yacl/utils:parallel",
    ],
)

psi_cc_test(
    name = "ecdh_psi_test",
    srcs = ["ecdh_psi_test.cc"],
    deps = [
        ":ecdh_psi",
        "//psi/utils:test_utils",
    ],
)

psi_cc_binary(
    name = "ecdh_psi_benchmark",
    srcs = ["ecdh_psi_benchmark.cc"],
    deps = [
        ":ecdh_psi",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

psi_cc_library(
    name = "ecdh_3pc_psi",
    srcs = ["ecdh_3pc_psi.cc"],
    hdrs = ["ecdh_3pc_psi.h"],
    deps = [
        ":ecdh_psi",
    ],
)

psi_cc_test(
    name = "ecdh_3pc_psi_test",
    srcs = ["ecdh_3pc_psi_test.cc"],
    deps = [
        ":ecdh_3pc_psi",
        "//psi/utils:test_utils",
    ],
)

psi_cc_binary(
    name = "ecdh_3pc_psi_benchmark",
    srcs = ["ecdh_3pc_psi_benchmark.cc"],
    deps = [
        ":ecdh_3pc_psi",
        "//psi/utils:test_utils",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

psi_cc_library(
    name = "ecdh_oprf_psi",
    srcs = ["ecdh_oprf_psi.cc"],
    hdrs = ["ecdh_oprf_psi.h"],
    deps = [
        ":ecdh_oprf_selector",
        "//psi/utils:batch_provider",
        "//psi/utils:communication",
        "//psi/utils:ec_point_store",
        "//psi/utils:ub_psi_cache",
        "@com_google_absl//absl/strings",
        "@yacl//yacl/base:exception",
        "@yacl//yacl/link",
        "@yacl//yacl/utils:parallel",
    ],
)

psi_cc_test(
    name = "ecdh_oprf_psi_test",
    srcs = ["ecdh_oprf_psi_test.cc"],
    deps = [
        ":ecdh_oprf_psi",
        "//psi/utils:test_utils",
        "@boost//:uuid",
        "@com_google_absl//absl/time",
        "@yacl//yacl/crypto/rand",
        "@yacl//yacl/crypto/tools:prg",
        "@yacl//yacl/utils:scope_guard",
    ],
)

psi_cc_library(
    name = "ecdh_logger",
    hdrs = ["ecdh_logger.h"],
    deps = [
        "//psi/cryptor:ecc_cryptor",
        "@yacl//yacl/base:exception",
    ],
)

psi_cc_library(
    name = "common",
    hdrs = ["common.h"],
)

psi_cc_library(
    name = "receiver",
    srcs = ["receiver.cc"],
    hdrs = ["receiver.h"],
    deps = [
        ":common",
        "//psi:interface",
        "//psi/utils:arrow_csv_batch_provider",
    ],
)

psi_cc_library(
    name = "sender",
    srcs = ["sender.cc"],
    hdrs = ["sender.h"],
    deps = [
        ":common",
        "//psi:interface",
        "//psi/utils:arrow_csv_batch_provider",
    ],
)

psi_cc_library(
    name = "client",
    srcs = ["client.cc"],
    hdrs = ["client.h"],
    deps = [
        ":ecdh_oprf_psi",
        "//psi:interface",
        "//psi/utils:sync",
    ],
)

psi_cc_library(
    name = "server",
    srcs = ["server.cc"],
    hdrs = ["server.h"],
    deps = [
        ":ecdh_oprf_psi",
        "//psi:interface",
        "//psi/utils:ec",
        "//psi/utils:sync",
    ],
)
