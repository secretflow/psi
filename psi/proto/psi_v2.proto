// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

import "yacl/link/link.proto";
import "psi/psi/psi.proto";

package psi.psi.v2;

// Role of parties.
enum Role {
  ROLE_UNSPECIFIED = 0;

  // receiver
  // In 2P symmetric PSI, receiver would always receive the result.
  ROLE_RECEIVER = 1;

  // sender
  // In 2P symmetric PSI, sender is the other participant apart from receiver.
  ROLE_SENDER = 2;
}

// PSI protocols.
enum Protocol {
  PROTOCOL_UNSPECIFIED = 0;

  // Semi-Honest Secure

  // [Mea86]C. Meadows, "A More Efficient Cryptographic Matchmaking Protocol
  // for Use in the Absence of a Continuously Available Third Party," 1986 IEEE
  // Symposium on Security and Privacy, Oakland, CA, USA, 1986, pp. 134-134,
  // doi: 10.1109/SP.1986.10022.
  PROTOCOL_ECDH = 1;

  // Efficient Batched Oblivious PRF with Applications to Private Set
  // Intersection https://eprint.iacr.org/2016/799.pdf
  PROTOCOL_KKRT = 2;

  // Blazing Fast PSI https://eprint.iacr.org/2022/320.pdf
  PROTOCOL_RR22 = 3;
}

// Configs for ECDH protocol.
message EcdhConfig {
  .psi.psi.CurveType curve = 1;
}

// Configs for KKRT protocol
message KkrtConfig {
  // Since the total input may not fit in memory, the input may be splitted into
  // buckets. bucket_size indicate the number of items in each bucket.
  // If the memory of host is limited, you should set a smaller bucket size.
  // Otherwise, you should use a larger one.
  // If not set, use default value: 1 << 20.
  uint64 bucket_size = 1;
}

// Configs for RR22 protocol.
message Rr22Config {
  // Since the total input may not fit in memory, the input may be splitted into
  // buckets. bucket_size indicate the number of items in each bucket.
  // If the memory of host is limited, you should set a smaller bucket size.
  // Otherwise, you should use a larger one.
  // If not set, use default value: 1 << 20.
  uint64 bucket_size = 1;

  bool low_comm_mode = 2;
}

// Any items related to PSI protocols.
message ProtocolConfig {
  Protocol protocol = 1;

  Role role = 2;

  // Reveal result to sender.
  bool broadcast_result = 3;

  // For ECDH protocol.
  EcdhConfig ecdh_config = 4;

  // For KKRT protocol.
  KkrtConfig kkrt_config = 5;

  // For RR22 protocol.
  Rr22Config rr22_config = 6;
}

// TODO(junfeng): support more io types including oss, sql, etc.
enum IoType {
  IO_TYPE_UNSPECIFIED = 0;

  // Local csv file.
  IO_TYPE_FILE_CSV = 1;
}

// Input configuration.
message InputConfig {
  IoType type = 1;

  // Required for FILE.
  string path = 2;
}

// Output configuration.
message OutputConfig {
  IoType type = 1;

  // Required for FILE.
  string path = 2;
}

// Configuration for recovery.
// If a PSI task failed unexpectedly, e.g. network failures and restart, the
// task can resume to the latest checkpoint to save time.
// However, enabling recovery would due in extra disk IOs and disk space
// occupation.
message RecoveryConfig {
  bool enabled = 1;

  // Stores status and checkpoint files.
  string folder = 2;
}

// Logging level for default logger.
// Default to info.
// Supports:
//
// - trace: SPDLOG_LEVEL_TRACE
// - debug: SPDLOG_LEVEL_DEBUG
// - info: SPDLOG_LEVEL_INFO
// - warn: SPDLOG_LEVEL_WARN
// - err: SPDLOG_LEVEL_ERROR
// - critical: SPDLOG_LEVEL_CRITICAL
// - off: SPDLOG_LEVEL_OFF
//
message DebugOptions {
  string logging_level = 1;

  // The path of trace.
  // Deafult to /tmp/psi.trace
  string trace_path = 2;
}

// The top level of Configs.
// run(PsiConfig)->PsiReport
//
// Advanced Joins
// Type: Inner Join
// e.g. If input of receiver is
// ```
// | key1 | value1|
// |------|-------|
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | y    | 4     |
// ```
// and input of sender is
// ```
// | key2 | value2|
// |------|-------|
// | x    | a     |
// | x    | b     |
// | z    | c     |
// ```
//
// After inner join.
// The output of receiver is:
// ```
// | key1 | value1|
// |------|-------|
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// ```
// The output of sender is
// ```
// | key2 | value2|
// |------|-------|
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// ```
//
// Type: Left Join
// After left join.
// The output of left side is:
// ```
// | key1 | value1|
// |------|-------|
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | y    | 4     |
// ```
// The output of right side is
// ```
// | key2 | value2|
// |------|-------|
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | n/a  | n/a   |
// ```
//
// Type: Right Join
// After right join.
// The output of left side is:
// ```
// | key1 | value1|
// |------|-------|
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | n/a  | n/a   |
// ```
// The output of right side is
// ```
// | key2 | value2|
// |------|-------|
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | z    | c     |
// ```
//
// Type: Full Join
// After full join.
// The output of left side is:
// ```
// | key1 | value1|
// |------|-------|
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | x    | 1     |
// | x    | 2     |
// | x    | 3     |
// | y    | 4     |
// | n/a  | n/a   |
// ```
// The output of right side is
// ```
// | key2 | value2|
// |------|-------|
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | x    | a     |
// | x    | b     |
// | n/a  | n/a   |
// | z    | c     |
// ```
//
// Type: Difference
// After difference.
// The output of left side is:
// ```
// | key1 | value1|
// |------|-------|
// | y    | 4     |
// | n/a  | n/a   |
// ```
// The output of right side is
// ```
// | key2 | value2|
// |------|-------|
// | n/a  | n/a   |
// | z    | c     |
// ```
message PsiConfig {
  // Configs for protocols.
  ProtocolConfig protocol_config = 1;

  // Configs for input.
  InputConfig input_config = 2;

  // Configs for output.
  OutputConfig output_config = 3;

  // Configs for network.
  yacl.link.ContextDescProto link_config = 4;

  string self_link_party = 5;

  // keys for intersection.
  repeated string keys = 6;

  // Logging level.
  DebugOptions debug_options = 7;

  // If true, the check of duplicated items will be skiped.
  bool skip_duplicates_check = 8;

  reserved 9;

  // It true, output is not promised to be aligned.
  bool disable_alignment = 10;

  // Configs for recovery.
  RecoveryConfig recovery_config = 11;

  // Advanced Join allow duplicate keys.
  // - If selected, duplicates_check is skipped.
  // - If selected, both parties are allowed to contain duplicate keys.
  // - If use left join, full join or difference, the size of difference set of
  // left party is revealed to right party.
  // - If use right join, full join or difference, the size of difference set of
  // right party is revealed to left party.
  enum AdvancedJoinType {
    ADVANCED_JOIN_TYPE_UNSPECIFIED = 0;

    ADVANCED_JOIN_TYPE_INNER_JOIN = 1;

    ADVANCED_JOIN_TYPE_LEFT_JOIN = 2;

    ADVANCED_JOIN_TYPE_RIGHT_JOIN = 3;

    ADVANCED_JOIN_TYPE_FULL_JOIN = 4;

    ADVANCED_JOIN_TYPE_DIFFERENCE = 5;
  }

  AdvancedJoinType advanced_join_type = 12;

  // Required if advanced_join_type is ADVANCED_JOIN_TYPE_LEFT_JOIN or
  // ADVANCED_JOIN_TYPE_RIGHT_JOIN.
  Role left_side = 13;

  // Check if hash digest of keys from parties are equal to determine whether to
  // early-stop.
  bool check_hash_digest = 14;
}

// Execution Report.
message PsiReport {
  // The data count of input.
  int64 original_count = 1;

  // The count of intersection. Get `-1` when self party can not get result.
  int64 intersection_count = 2;
}

// Save some critical information for future recovery.
message RecoveryCheckpoint {
  enum Stage {
    STAGE_UNSPECIFIED = 0;

    STAGE_INIT_END = 1;

    STAGE_PRE_PROCESS_END = 2;

    STAGE_ONLINE_START = 3;

    STAGE_ONLINE_END = 4;

    STAGE_POST_PROCESS_END = 5;
  }

  // Stage of PSI.
  Stage stage = 1;

  // A copy of origin PSI config.
  PsiConfig config = 2;

  // Hash digest of input keys.
  string input_hash_digest = 3;

  // Saved dual masked item count from self originally.
  // PROTOCOL_ECDH only.
  uint64 ecdh_dual_masked_item_self_count = 4;

  // Saved dual masked item count from peer originally.
  // PROTOCOL_ECDH only.
  uint64 ecdh_dual_masked_item_peer_count = 5;

  // Saved parsed bucket count.
  // PROTOCOL_KKRT and PROTOCOL_RR22 only.
  uint64 parsed_bucket_count = 6;
}

message InternalRecoveryRecord {
  RecoveryCheckpoint.Stage stage = 1;

  uint64 ecdh_dual_masked_item_peer_count = 2;

  uint64 parsed_bucket_count = 3;
}
